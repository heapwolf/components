#!/usr/bin/env node
const fs = require('fs')
const path = require('path')
const marked = require('marked')
const hl = require('highlight.js')
const fetch = require('node-fetch')

const renderer = new marked.Renderer()

renderer.heading = (text, level) => {
  const escapedText = text.toLowerCase().replace(/[^\w]+/g, '-')
  if (level > 1) return `<h${level}>${text}</h${level}>\n`
  return `<h${level} id="${escapedText}">${text}</h${level}>\n`
}

const highlight = (code, lang = 'javascript', escaped) => {
  if (!lang) lang = 'javascript'
  return hl.highlight(lang, code).value
}

marked.setOptions({
  renderer,
  highlight
})

const componentsDir = path.join(__dirname, '..')
const docsDir = path.join(__dirname, '..', 'docs')

function write (...args) {
  const data = args.pop()
  fs.writeFileSync(path.join(...args), data)
}

function read (...args) {
  try {
    return fs.readFileSync(path.join(...args), 'utf8')
  } catch (e) {
    return ''
  }
}

function createNonceFile () {
  const buf = Buffer.from('Some super secret', 'ascii')
  const nonce = buf.toString('base64')

  fs.writeFileSync(path.join(docsDir, 'src', 'nonce.js'), `
    module.exports = '${nonce}'
  `)

  return nonce
}

function createPage (nonce, data, className) {
  const toc = data.map(data => data.link).join('\n')
  const sections = data.map(data => data.section).join('\n')

  return `
    <!DOCTYPE html>

      ${read(docsDir, 'src', 'head.html').replace(/%nonce%/g, nonce)}

      <body data-page="${className}">
        <nav>
          <div class="page-selection">
            <a name="docs" href="./index.html">Docs</a>
            <a name="examples" href="./examples.html">Examples</a>
          </div>

          <ul>
            ${toc}
          </ul>

        </nav>
        <main>

          <div class="mobile-nav">
            <a name="docs" href="./index.html">Docs</a>
            <a name="examples" href="./examples.html">Examples</a>
          </div>

          <tonic-sprite></tonic-sprite>

          ${sections.replace(/%nonce%/g, nonce)}

          <footer>
            <div>
              <span>Supported by</span>
              <svg>
                <use xlink:href="./logo-sprite.svg#mp_logo">
              </svg>
            </div>
          </footer>
        </main>
        <script nonce="${nonce}" crossorigin="anonymous" src="bundle.js"></script>
      </body>
    </html>
  `
}

const componentDocs = []
const developerDocs = []

function wrapLink (title) {
  const id = title.replace(/\s/g, '-').toLowerCase()
  const selected = id === 'intro' ? 'selected' : ''

  return `
    <li>
      <a href="#${id}" class="${selected}">${title}</a>
    </li>
  `
}

function githubLink (title) {
  return `
    <div class="component-github-link">
      <a href="https://github.com/optoolco/components/tree/master/${title.toLowerCase()}/">Github</a>
    </div>
  `
}

function wrapSection ({ content, title, group, dir }) {
  const id = title.replace(/\s/g, '-').toLowerCase()
  const ghLink = dir ? githubLink(dir) : ''

  return `
    <section id="${id}">
      ${ghLink}
      ${content}
    </section>
  `
}

function parseHeading (s) {
  const { 0: match } = /^#\s*(.*)[\n|\r]/.exec(s)
  if (!match) throw new Error('No heading found in doc')

  return match.slice(1).trim()
}

async function compile () {
  const markdownDir = path.join(docsDir, 'src', 'markdown')
  const customFiles = [
    'intro.md',
    'gettingstarted.md',
    'props.md',
    'state.md',
    'composition.md',
    'events.md',
    'methods.md',
    'styles.md',
    'csp.md'
  ]

  for (const file of customFiles) {
    const s = read(markdownDir, file)
    if (!s) continue

    const title = parseHeading(s)
    developerDocs.push({
      title,
      link: wrapLink(title),
      section: wrapSection({
        content: marked(s),
        title
      })
    })
  }

  const componentDirs = fs.readdirSync(componentsDir)

  for (const dir of componentDirs) {
    let s = read(componentsDir, dir, 'README.md')
    if (!s) continue

    const demoHTML = read(componentsDir, dir, 'readme.html')
    s = s.replace(/%html%/g, demoHTML)

    const title = parseHeading(s)

    componentDocs.push({
      title,
      link: wrapLink(title),
      section: wrapSection({
        content: marked(s),
        title,
        dir
      })
    })
  }

  const intro = read(docsDir, 'src', 'intro.html')

  componentDocs.unshift({
    title: 'Intro',
    link: wrapLink('Intro'),
    section: wrapSection({
      content: intro,
      title: 'Intro',
      type: 'component'
    })
  })

  {
    //
    // Add the API as a section
    //
    const title = 'API'
    const url = 'https://raw.githubusercontent.com/optoolco/tonic/master/API.md'

    const s = await (await fetch(url)).text()

    developerDocs.push({
      title,
      link: wrapLink(title, 'custom'),
      section: wrapSection({
        content: marked(s),
        title,
        group: 'custom'
      })
    })
  }
}

async function main () {
  //
  // Bundle the demo code for each component and compile
  // the markdown into an array of sections.
  //
  await compile()

  //
  // Create a file that exports a nonce so it can be required by other js
  // files in the docs, but also return the nonce itself so we can use it
  // in the html.
  //
  const nonce = createNonceFile()

  //
  // Template the sections and write to html files.
  //
  write(docsDir, 'examples.html', createPage(nonce, componentDocs, 'examples'))
  write(docsDir, 'index.html', createPage(nonce, developerDocs, 'docs'))
}

main()
